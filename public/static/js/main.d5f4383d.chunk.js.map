{"version":3,"sources":["components/MissionKey.js","components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["MissionKey","react_default","a","createElement","className","LaunchItem","props","classNames","text-success","launch","launch_success","text-danger","mission_name","dist_default","format","launch_date_local","react_router_dom","to","concat","flight_number","LAUNCHES_QUERY","gql","_templateObject","Launches","Fragment","components_MissionKey","react_apollo_esm","query","_ref","loading","error","data","console","log","launches","map","components_LaunchItem","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5f4383d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MissionKey = () => {\r\n  return (\r\n    <div className='my-3'>\r\n      <p>\r\n        <span className='px-3 mr-2 bg-success' /> = Success\r\n      </p>\r\n      <p>\r\n        <span className='px-3 mr-2 bg-danger' /> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MissionKey;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction LaunchItem(props) {\r\n  return (\r\n    <div className='card card-body mb-3'>\r\n      <div className='row'>\r\n        <div className='col-md-9'>\r\n          <h4>\r\n            Mission:{' '}\r\n            <span\r\n              className={classNames({\r\n                'text-success': props.launch.launch_success,\r\n                'text-danger': !props.launch.launch_success\r\n              })}\r\n            >\r\n              {props.launch.mission_name}\r\n            </span>\r\n          </h4>\r\n          <p>\r\n            Date:{' '}\r\n            <Moment format='YYYY-MM-DD HH:mm'>\r\n              {props.launch.launch_date_local}\r\n            </Moment>\r\n          </p>\r\n        </div>\r\n        <div className='col-md-3' />\r\n        <Link\r\n          to={`/launch/${props.launch.flight_number}`}\r\n          className='btn btn-danger'\r\n        >\r\n          Launch Details\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default LaunchItem;\r\n","import React, { Component } from 'react';\r\nimport MissionKey from './MissionKey';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LanchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nclass Launches extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className='display-4 my-3'>Launches</h1>\r\n        <MissionKey />\r\n        <Query query={LAUNCHES_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h4>Loading..</h4>;\r\n            if (error) console.log(error);\r\n            // console.log(data);\r\n            // return <h1>test</h1>;\r\n            return (\r\n              <React.Fragment>\r\n                {data.launches.map(launch => (\r\n                  <LaunchItem key={launch.flight_number} launch={launch} />\r\n                ))}\r\n              </React.Fragment>\r\n            );\r\n          }}\r\n        </Query>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launches;\r\n","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Launch extends Component {\r\n  render() {\r\n    let { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h4>Loading..</h4>;\r\n            if (error) console.log(error);\r\n\r\n            // console.log(data);\r\n\r\n            const {\r\n              mission_name,\r\n              flight_number,\r\n              launch_year,\r\n              launch_success,\r\n              rocket: { rocket_id, rocket_name, rocket_type }\r\n            } = data.launch;\r\n\r\n            return (\r\n              <div>\r\n                <h1 className='display-4 my-3'>\r\n                  <span className='text-dark'>Mission:</span> {mission_name}\r\n                </h1>\r\n                <h4 className='mb-3'>Launch Details</h4>\r\n                <ul className='list-group'>\r\n                  <li className='list-group-item'>\r\n                    Flight_number: {flight_number}\r\n                  </li>\r\n                  <li className='list-group-item'>\r\n                    Launch Year: {launch_year}\r\n                  </li>\r\n                  <li className='list-group-item'>\r\n                    Launch Successful:{' '}\r\n                    <span\r\n                      className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                      })}\r\n                    >\r\n                      {' '}\r\n                      {launch_success ? 'Yes' : 'No'}\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n                <h4 className='my-3'>Rocket Details</h4>\r\n                <ul className='list-group'>\r\n                  <li className='list-group-item'>Rocket Id: {rocket_id}</li>\r\n                  <li className='list-group-item'>\r\n                    Rocket Name: {rocket_name}\r\n                  </li>\r\n                  <li className='list-group-item'>\r\n                    Rocket Type: {rocket_type}\r\n                  </li>\r\n                </ul>\r\n                <hr />\r\n                <Link to='/' className='btn btn-danger'>\r\n                  Back\r\n                </Link>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launch;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Launches from './components/Launches';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  // uri: 'http://localhost:4000/graphql'\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className='container'>\n            <Route exact path='/' component={Launches} />\n            <Route exact path='/launch/:flight_number' component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}